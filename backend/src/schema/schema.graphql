type Query {
  #"Verificar si existe el usuario"
  verificarCelular(celular: String!): Boolean!
  #"Login"
  login(celular: String!, contrasena: String!): Boolean!
  #"Informacion de un cliente"
  cliente(celular: String!): Cliente
  #"Informacion de un trabajador"
  trabajador(celular: String!): Trabajador
  #Filtrar trabajador en un radio de 3km
  buscarTrabajador(labor: String!, celularCliente: String ): [realiza] #Falta filtrar por  distancia
  #Calcular tiempo de un trabajado
  pago(codServicio: String!): Float
  
}


type Mutation {
  "Anadir un  Usuario"
   CrearUsuario(usuario: UsuarioInput!): Boolean! 
}
type Usuario {
  nombre: String!
  apellido: String!
  celular: String!
  direccion: String!
  email: String!
  cedula: String!
}
type Cliente {
    recibo: String!  
    usuario: Usuario! 
}
type Trabajador{
    usuario: Usuario! 
    estado: Boolean!
    cantservicios: Int!
    fotocedula: String!
    fotoperfil: String!
    promedio: Float!
}

type realiza {
  nombre_trabajador: String!
  celular: String!
  promedio: Float!
  fotoperfil: String!
  nombre_labor: String!
  direcciontext: String!
  precio: Float!
  descripcion: String!
  estado: Boolean
  distancia: String
}

input UsuarioInput {
  nombre: String!
  apellido: String!
  celular: String!
  contrasena: String!
  #longitud latitud
  direccion: String!
  email: String!
  cedula: String!
}

